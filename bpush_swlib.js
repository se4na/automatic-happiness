function isSimpleEmbeddedMode(){return"bpush.net"===location.host}function callBpushApi(a,b,c){var d=_bpush_env.app_key,e=document.createElement("script");e.type="text/javascript";e.src=a+"?cb="+b+"&app_key="+d+"&"+c;document.body.appendChild(e)}function isNotificationDeniedExplicit(){return"undefined"===typeof Notification?!1:Notification&&"denied"===Notification.permission}
function isSupportPushNotification(){return"undefined"!==typeof Promise&&"undefined"!==typeof Notification&&"serviceWorker"in navigator?!0:!1}function enablePushNotification(){return new Promise(function(a,b){isServiceWorkerEnabled()&&"default"!=Notification.permission?a():requestPermission().then(function(){registerServiceWorker().then(function(c){registerSubscription(c).then(function(){a()}).catch(function(a){b()})}).catch(function(a){console.log(a);b()})}).catch(function(){b()})})}
function requestPermission(){return new Promise(function(a,b){"undefined"===typeof Notification?b():Notification?"granted"===Notification.permission?a():Notification.requestPermission(function(c){"granted"===c?a():b()}):b()})}function isServiceWorkerEnabled(){return"serviceWorker"in navigator&&navigator.serviceWorker.controller?!0:!1}
function registerServiceWorker(){return new Promise(function(a,b){if("serviceWorker"in navigator)try{var c=null,c=isSimpleEmbeddedMode()?"./service_worker":"/bpush_worker.js",d=null;navigator.serviceWorker.register(c,{scope:"."}).then(function(a){d=a;return navigator.serviceWorker.ready},b).then(function(){a(d)})}catch(e){console.log(e),b()}else b()})}var pushManager=null;
function registerSubscription(a){return new Promise(function(b,c){if("pushManager"in a)return pushManager=a.pushManager,pushManager.getSubscription().then(function(a){getSubscription(a).then(b,c)}).catch(function(){resetSubscription();c()});c()})}var subscription=null;function getSubscription(a){return new Promise(function(b,c){a?sendSubscription(a).then(b,c):navigator.serviceWorker.ready.then(subscribe).then(b,c)})}var sendSubscriptionCallbackArgs=null;
function sendSubscriptionCallback(a){"success"==JSON.parse(a).status?sendSubscriptionCallbackArgs.resolve():sendSubscriptionCallbackArgs.reject()}function sendSubscription(a){return new Promise(function(b,c){var d;d="undefined"===typeof a.subscriptionId?a.endpoint.split("/").pop():a.subscriptionId;sendSubscriptionCallbackArgs={resolve:b,reject:c};callBpushApi(_bpush_env.endpoint_base+"/sapi/v1/register_subscription","sendSubscriptionCallback","subscription_id="+d)})}
function resetSubscription(){}function subscribe(a){return a.pushManager.subscribe({userVisibleOnly:!0}).then(sendSubscription,resetSubscription)}function unsubscribe(a){a.pushManager.unsubscribe()}function unregisterServiceWorker(){return new Promise(function(a,b){return navigator.serviceWorker.getRegistration().then(function(c){if(c)return c.unregister().then(function(b){a(b)}).catch(function(){b()});b()}).catch(function(){b()})})}
function send(a){return new Promise(function(b,c){var d=new MessageChannel;d.port1.onmessage=function(a){a.data.error?c(a.data.error):b(a.data)};navigator.serviceWorker.controller.postMessage(a,[d.port2])})};
